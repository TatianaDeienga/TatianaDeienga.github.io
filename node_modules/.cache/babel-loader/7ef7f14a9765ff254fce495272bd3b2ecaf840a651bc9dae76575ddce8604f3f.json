{"ast":null,"code":"import _classCallCheck from\"/Users/ze37/Documents/Github/chameleon.github.io/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";import _createClass from\"/Users/ze37/Documents/Github/chameleon.github.io/node_modules/@babel/runtime/helpers/esm/createClass.js\";import _inherits from\"/Users/ze37/Documents/Github/chameleon.github.io/node_modules/@babel/runtime/helpers/esm/inherits.js\";import _createSuper from\"/Users/ze37/Documents/Github/chameleon.github.io/node_modules/@babel/runtime/helpers/esm/createSuper.js\";import React,{Component}from'react';import'./Chatbot.css';//import ChatBot from 'react-simple-chatbot';\n// import { ThemeProvider } from 'styled-components';\nimport{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var Chatbot=/*#__PURE__*/function(_Component){_inherits(Chatbot,_Component);var _super=_createSuper(Chatbot);function Chatbot(){var _this;_classCallCheck(this,Chatbot);_this=_super.call(this);_this.state={userMessage:''};return _this;}_createClass(Chatbot,[{key:\"componentDidMount\",value:function componentDidMount(){var _this2=this;// Your Chatbot JavaScript code goes here\nvar incomingMessageImage=\"images/chameleon (2).png\";var chatInput=document.querySelector(\".chat-input textarea\");var sendButton=document.getElementById('send-btn');var optionsButton=document.querySelector('.options-button');var optionsContainer=document.querySelector('.options-container');var quickOptionsContainer=document.querySelector('.quick-options');var option1Button=document.getElementById('option1');var option2Button=document.getElementById('option2');var option3Button=document.getElementById('option3');var closeBtn=document.querySelector(\".close-btn\");var chatbotToggler=document.querySelector(\".chatbot-toggler\");var simulateTyping=function simulateTyping(message){chatInput.value=message;var inputEvent=new Event('input',{bubbles:true,cancelable:true});chatInput.dispatchEvent(inputEvent);};option1Button.addEventListener('click',function(){var response=\"Learn About our Projects\";simulateTyping(response);sendButton.click();quickOptionsContainer.style.display='none';});option2Button.addEventListener('click',function(){var response=\"Support Us\";simulateTyping(response);sendButton.click();quickOptionsContainer.style.display='none';});option3Button.addEventListener('click',function(){var response=\"I have another Question\";simulateTyping(response);sendButton.click();quickOptionsContainer.style.display='none';});optionsButton.addEventListener('click',function(){optionsContainer.style.display=optionsContainer.style.display==='block'?'none':'block';});// Close options when clicking outside of it\ndocument.addEventListener('click',function(event){if(!optionsButton.contains(event.target)&&!optionsContainer.contains(event.target)){optionsContainer.style.display='none';}});var chatbox=document.querySelector(\".chatbox\");var inputInitHeight=chatInput.scrollHeight;var createChatLi=function createChatLi(message,className){var chatLi=document.createElement(\"li\");chatLi.classList.add(\"chat\",\"\".concat(className));var chatContent;if(className===\"outgoing\"){chatContent=\"<p></p>\";}else if(className===\"incoming\"){chatContent=\"<img src=\\\"\".concat(incomingMessageImage,\"\\\" alt=\\\"Incoming Message Icon\\\"><p></p>\");}chatLi.innerHTML=chatContent;chatLi.querySelector(\"p\").textContent=message;return chatLi;};var generateResponse=function generateResponse(chatElement){var API_URL=\"https://api.openai.com/v1/chat/completions\";var messageElement=chatElement.querySelector(\"p\");var API_KEY=\"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\";// API key\nvar requestOptions={method:\"POST\",headers:{\"Content-Type\":\"application/json\",\"Authorization\":\"Bearer \".concat(API_KEY)},body:JSON.stringify({model:\"gpt-3.5-turbo\",messages:[{role:\"user\",content:_this2.state.userMessage}]})};fetch(API_URL,requestOptions).then(function(res){return res.json();}).then(function(data){messageElement.textContent=data.choices[0].message.content.trim();}).catch(function(){messageElement.classList.add(\"error\");messageElement.textContent=\"Oops! Something went wrong. Please try again.\";}).finally(function(){return chatbox.scrollTo(0,chatbox.scrollHeight);});var imageElement=document.createElement(\"img\");imageElement.src=incomingMessageImage;imageElement.alt=\"Incoming Message Image\";imageElement.classList.add(\"incoming-image\");chatElement.insertBefore(imageElement,messageElement);var existingImage=chatElement.querySelector(\".incoming-image\");if(existingImage){chatElement.replaceChild(imageElement,existingImage);}else{chatElement.insertBefore(imageElement,messageElement);}};var handleChat=function handleChat(){_this2.state.userMessage=chatInput.value.trim();if(!_this2.state.userMessage)return;chatInput.value=\"\";chatInput.style.height=\"\".concat(inputInitHeight,\"px\");chatbox.appendChild(createChatLi(_this2.state.userMessage,\"outgoing\"));chatbox.scrollTo(0,chatbox.scrollHeight);setTimeout(function(){var incomingChatLi=createChatLi(\"Thinking...\",\"incoming\");chatbox.appendChild(incomingChatLi);chatbox.scrollTo(0,chatbox.scrollHeight);generateResponse(incomingChatLi);},600);};chatInput.addEventListener(\"input\",function(){chatInput.style.height=\"\".concat(inputInitHeight,\"px\");chatInput.style.height=\"\".concat(chatInput.scrollHeight,\"px\");});chatInput.addEventListener(\"keydown\",function(e){if(e.key===\"Enter\"&&!e.shiftKey&&window.innerWidth>800){e.preventDefault();handleChat();}});sendButton.addEventListener(\"click\",handleChat);closeBtn.addEventListener(\"click\",function(){return document.body.classList.remove(\"show-chatbot\");});chatbotToggler.addEventListener(\"click\",function(){return document.body.classList.toggle(\"show-chatbot\");});}},{key:\"render\",value:function render(){return/*#__PURE__*/_jsxs(\"div\",{className:\"chatbot\",children:[/*#__PURE__*/_jsxs(\"button\",{className:\"chatbot-toggler\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"material-symbols-outlined\",children:\"more_horiz\"}),/*#__PURE__*/_jsx(\"span\",{className:\"material-symbols-outlined\",children:\"arrow_back\"})]}),/*#__PURE__*/_jsxs(\"header\",{children:[/*#__PURE__*/_jsx(\"img\",{src:\"images/ChameleonLogo.png\",alt:\"Chatbot Image\",className:\"chatbot-image\"}),/*#__PURE__*/_jsx(\"h2\",{children:\"Chameleon\"}),/*#__PURE__*/_jsx(\"button\",{className:\"options-button material-symbols-outlined\",children:\"more_vert\"}),/*#__PURE__*/_jsx(\"div\",{className:\"options-container\",children:/*#__PURE__*/_jsxs(\"ul\",{children:[/*#__PURE__*/_jsx(\"li\",{children:\"Website Project\"}),/*#__PURE__*/_jsx(\"li\",{children:\"MOP project\"}),/*#__PURE__*/_jsx(\"li\",{children:\"Evoleon Project\"})]})}),/*#__PURE__*/_jsx(\"span\",{className:\"close-btn material-symbols-outlined\",children:\"arrow_back\"})]}),/*#__PURE__*/_jsx(\"ul\",{className:\"chatbox\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"quick-options\",children:[/*#__PURE__*/_jsx(\"button\",{id:\"option1\",children:\"Learn About our Projects\"}),/*#__PURE__*/_jsx(\"button\",{id:\"option2\",children:\"Support Us\"}),/*#__PURE__*/_jsx(\"button\",{id:\"option3\",children:\"I have another Question\"})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"chat-input\",children:[/*#__PURE__*/_jsx(\"textarea\",{placeholder:\"Enter your message here..\",spellCheck:\"false\",required:true}),/*#__PURE__*/_jsx(\"span\",{id:\"send-btn\",className:\"material-symbols-rounded\",children:\"send\"})]})]});}}]);return Chatbot;}(Component);/*\n// This is the code for changing the bot's responses, integrate it with the rest of the code once the UI is fixed.\nconst steps = [\n    {\n        id: '0',\n        message: 'This is Chameleon Chatbot!',\n \n        // This calls the next id\n        // i.e. id 1 in this case\n        trigger: '1',\n    }, {\n        id: '1',\n \n        // This message appears in\n        // the bot chat bubble\n        message: 'Please write your username',\n        trigger: '2'\n    }, {\n        id: '2',\n \n        // Here we want the user\n        // to enter input\n        user: true,\n        trigger: '3',\n    }, {\n        id: '3',\n        message: \" hi {previousValue}, how can I help you?\",\n        trigger: 4\n    }, {\n        id: '4',\n        options: [\n             \n            { value: 1, label: 'Resources Link' },\n            { value: 2, label: 'Projects Link' },\n \n        ],\n        end: true\n    }\n];\n \n// Set some properties of the bot\nconst config = {\n    botAvatar: \"img.png\",\n    floating: true,\n};\n \nfunction Chatbot() {\n    return (\n        <div className=\"App\">\n            <ChatBot\n \n                // This appears as the header text for the chat bot\n                headerTitle=\"Chameleon Bot\"\n                steps={steps}\n                {...config}\n \n            />\n        </div>\n    );\n}\n*/export default Chatbot;","map":{"version":3,"names":["React","Component","jsx","_jsx","jsxs","_jsxs","Chatbot","_Component","_inherits","_super","_createSuper","_this","_classCallCheck","call","state","userMessage","_createClass","key","value","componentDidMount","_this2","incomingMessageImage","chatInput","document","querySelector","sendButton","getElementById","optionsButton","optionsContainer","quickOptionsContainer","option1Button","option2Button","option3Button","closeBtn","chatbotToggler","simulateTyping","message","inputEvent","Event","bubbles","cancelable","dispatchEvent","addEventListener","response","click","style","display","event","contains","target","chatbox","inputInitHeight","scrollHeight","createChatLi","className","chatLi","createElement","classList","add","concat","chatContent","innerHTML","textContent","generateResponse","chatElement","API_URL","messageElement","API_KEY","requestOptions","method","headers","body","JSON","stringify","model","messages","role","content","fetch","then","res","json","data","choices","trim","catch","finally","scrollTo","imageElement","src","alt","insertBefore","existingImage","replaceChild","handleChat","height","appendChild","setTimeout","incomingChatLi","e","shiftKey","window","innerWidth","preventDefault","remove","toggle","render","children","id","placeholder","spellCheck","required"],"sources":["/Users/ze37/Documents/Github/chameleon.github.io/src/pages/Chatbot/Chatbot.js"],"sourcesContent":["import React, { Component } from 'react';\nimport './Chatbot.css';\n//import ChatBot from 'react-simple-chatbot';\n// import { ThemeProvider } from 'styled-components';\n\nclass Chatbot extends Component {\n    constructor() {\n        super();\n        this.state = {\n            userMessage: '',\n        };\n    }\n\n    componentDidMount() {\n        // Your Chatbot JavaScript code goes here\n        const incomingMessageImage = \"images/chameleon (2).png\";\n        const chatInput = document.querySelector(\".chat-input textarea\");\n        const sendButton = document.getElementById('send-btn');\n        const optionsButton = document.querySelector('.options-button');\n        const optionsContainer = document.querySelector('.options-container');\n        const quickOptionsContainer = document.querySelector('.quick-options');\n\n        const option1Button = document.getElementById('option1');\n        const option2Button = document.getElementById('option2');\n        const option3Button = document.getElementById('option3');\n\n        const closeBtn = document.querySelector(\".close-btn\");\n        const chatbotToggler = document.querySelector(\".chatbot-toggler\");\n\n\n        const simulateTyping = (message) => {\n            chatInput.value = message;\n            const inputEvent = new Event('input', {\n                bubbles: true,\n                cancelable: true,\n            });\n            chatInput.dispatchEvent(inputEvent);\n        }\n\n        option1Button.addEventListener('click', () => {\n            const response = \"Learn About our Projects\";\n            simulateTyping(response);\n            sendButton.click();\n            quickOptionsContainer.style.display = 'none';\n        });\n\n        option2Button.addEventListener('click', () => {\n            const response = \"Support Us\";\n            simulateTyping(response);\n            sendButton.click();\n            quickOptionsContainer.style.display = 'none';\n        });\n\n        option3Button.addEventListener('click', () => {\n            const response = \"I have another Question\";\n            simulateTyping(response);\n            sendButton.click();\n            quickOptionsContainer.style.display = 'none';\n        });\n\n        optionsButton.addEventListener('click', () => {\n            optionsContainer.style.display = optionsContainer.style.display === 'block' ? 'none' : 'block';\n        });\n\n        // Close options when clicking outside of it\n        document.addEventListener('click', (event) => {\n            if (!optionsButton.contains(event.target) && !optionsContainer.contains(event.target)) {\n                optionsContainer.style.display = 'none';\n            }\n        });\n\n        const chatbox = document.querySelector(\".chatbox\");\n        const inputInitHeight = chatInput.scrollHeight;\n\n        const createChatLi = (message, className) => {\n            const chatLi = document.createElement(\"li\");\n            chatLi.classList.add(\"chat\", `${className}`);\n\n            let chatContent;\n\n            if (className === \"outgoing\") {\n                chatContent = `<p></p>`;\n            } else if (className === \"incoming\") {\n                chatContent = `<img src=\"${incomingMessageImage}\" alt=\"Incoming Message Icon\"><p></p>`;\n            }\n\n            chatLi.innerHTML = chatContent;\n            chatLi.querySelector(\"p\").textContent = message;\n            return chatLi;\n        }\n\n        const generateResponse = (chatElement) => {\n            const API_URL = \"https://api.openai.com/v1/chat/completions\";\n            const messageElement = chatElement.querySelector(\"p\");\n            const API_KEY = \"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\"; // API key\n\n            const requestOptions = {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                    \"Authorization\": `Bearer ${API_KEY}`\n                },\n                body: JSON.stringify({\n                    model: \"gpt-3.5-turbo\",\n                    messages: [{ role: \"user\", content: this.state.userMessage }],\n                })\n            }\n\n            fetch(API_URL, requestOptions)\n                .then(res => res.json())\n                .then(data => {\n                    messageElement.textContent = data.choices[0].message.content.trim();\n                })\n                .catch(() => {\n                    messageElement.classList.add(\"error\");\n                    messageElement.textContent = \"Oops! Something went wrong. Please try again.\";\n                })\n                .finally(() => chatbox.scrollTo(0, chatbox.scrollHeight));\n\n            const imageElement = document.createElement(\"img\");\n            imageElement.src = incomingMessageImage;\n            imageElement.alt = \"Incoming Message Image\";\n            imageElement.classList.add(\"incoming-image\");\n            chatElement.insertBefore(imageElement, messageElement);\n\n            const existingImage = chatElement.querySelector(\".incoming-image\");\n\n            if (existingImage) {\n                chatElement.replaceChild(imageElement, existingImage);\n            } else {\n                chatElement.insertBefore(imageElement, messageElement);\n            }\n        }\n\n        const handleChat = () => {\n            this.state.userMessage = chatInput.value.trim();\n            if (!this.state.userMessage) return;\n\n            chatInput.value = \"\";\n            chatInput.style.height = `${inputInitHeight}px`;\n\n            chatbox.appendChild(createChatLi(this.state.userMessage, \"outgoing\"));\n            chatbox.scrollTo(0, chatbox.scrollHeight);\n\n            setTimeout(() => {\n                const incomingChatLi = createChatLi(\"Thinking...\", \"incoming\");\n                chatbox.appendChild(incomingChatLi);\n                chatbox.scrollTo(0, chatbox.scrollHeight);\n                generateResponse(incomingChatLi);\n            }, 600);\n        }\n\n        chatInput.addEventListener(\"input\", () => {\n            chatInput.style.height = `${inputInitHeight}px`;\n            chatInput.style.height = `${chatInput.scrollHeight}px`;\n        });\n\n        chatInput.addEventListener(\"keydown\", (e) => {\n            if (e.key === \"Enter\" && !e.shiftKey && window.innerWidth > 800) {\n                e.preventDefault();\n                handleChat();\n            }\n        });\n\n        sendButton.addEventListener(\"click\", handleChat);\n        closeBtn.addEventListener(\"click\", () => document.body.classList.remove(\"show-chatbot\"));\n        chatbotToggler.addEventListener(\"click\", () => document.body.classList.toggle(\"show-chatbot\"));\n    }\n\n    render() {\n        return (\n            <div className=\"chatbot\">\n                <button className=\"chatbot-toggler\">\n                    <span className=\"material-symbols-outlined\">more_horiz</span>\n                    <span className=\"material-symbols-outlined\">arrow_back</span>\n                </button>\n                <header>\n                    <img\n                        src=\"images/ChameleonLogo.png\"\n                        alt=\"Chatbot Image\"\n                        className=\"chatbot-image\"\n                    />\n                    <h2>Chameleon</h2>\n                    <button className=\"options-button material-symbols-outlined\">\n                        more_vert\n                    </button>\n                    <div className=\"options-container\">\n                        <ul>\n                            <li>Website Project</li>\n                            <li>MOP project</li>\n                            <li>Evoleon Project</li>\n                        </ul>\n                    </div>\n                    <span className=\"close-btn material-symbols-outlined\">arrow_back</span>\n                </header>\n                <ul className=\"chatbox\">\n                    {/* Chat messages will be displayed here */}\n                </ul>\n                <div className=\"quick-options\">\n                    <button id=\"option1\">Learn About our Projects</button>\n                    <button id=\"option2\">Support Us</button>\n                    <button id=\"option3\">I have another Question</button>\n                </div>\n                <div className=\"chat-input\">\n                    <textarea\n                        placeholder=\"Enter your message here..\"\n                        spellCheck=\"false\"\n                        required\n                    ></textarea>\n                    <span id=\"send-btn\" className=\"material-symbols-rounded\">send</span>\n                </div>\n            </div>\n        );\n    }\n}\n\n/*\n// This is the code for changing the bot's responses, integrate it with the rest of the code once the UI is fixed.\nconst steps = [\n    {\n        id: '0',\n        message: 'This is Chameleon Chatbot!',\n \n        // This calls the next id\n        // i.e. id 1 in this case\n        trigger: '1',\n    }, {\n        id: '1',\n \n        // This message appears in\n        // the bot chat bubble\n        message: 'Please write your username',\n        trigger: '2'\n    }, {\n        id: '2',\n \n        // Here we want the user\n        // to enter input\n        user: true,\n        trigger: '3',\n    }, {\n        id: '3',\n        message: \" hi {previousValue}, how can I help you?\",\n        trigger: 4\n    }, {\n        id: '4',\n        options: [\n             \n            { value: 1, label: 'Resources Link' },\n            { value: 2, label: 'Projects Link' },\n \n        ],\n        end: true\n    }\n];\n \n// Set some properties of the bot\nconst config = {\n    botAvatar: \"img.png\",\n    floating: true,\n};\n \nfunction Chatbot() {\n    return (\n        <div className=\"App\">\n            <ChatBot\n \n                // This appears as the header text for the chat bot\n                headerTitle=\"Chameleon Bot\"\n                steps={steps}\n                {...config}\n \n            />\n        </div>\n    );\n}\n*/\nexport default Chatbot;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}